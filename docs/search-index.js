var N=null,E="",T="t",U="u",searchIndex={};
var R=["jsvalue","rootrenderingcomponent","usize","size2d","vdomweak","request","string","my_ws_uid","my_nickname","my nickname","my_player_number","What player am I","player_turn","websocket","statusinviteaskbeginmod.rs - code flow from this status","on click","msg player click","render Play or Wait","mem5::divplayersandscoresmod","result","try_from","try_into","mem5::divrulesanddescriptionmod","borrow_mut","approx_into","value_into","value_from","approx_from","as_any_mut","mem5::gamedatamod","type_id","to_owned","clone_into","borrow","typeid","mem5::rootrenderingcomponentmod","serialize","deserialize","This rendering will be rendered and then cached . It will…","PlayersAndScores","GameConfig","GameData","CardStatusCardFace","RootRenderingComponent","RulesAndDescription","mem5_common","nickname","MsgDummy","mem5_common::WsMessage","players_ws_uid","ws client instance unique id. To not listen the echo to…","asked_folder_name","content folder name","json of vector of players for the server to know whom to…","card_grid_data","game_config","card_index_of_first_click","this identifies the smartphone, but not the player-in-turn","all players for the server to know whom to send msg","card_index_of_second_click","have to send all the state of the game","msg id (random)","players","json of vector of players with nicknames and order data","vector of cards status","game_status","msg_id","StatusPlayAccepted","take turn begin","MsgTakeTurnEnd","MsgPlayerClick1stCard","MsgPlayerClick2ndCardPoint","MsgPlayerClick2ndCardTakeTurnBegin","to_string","wsmessage","formatter","WsMessage","GameStatus","MsgAckKind","To start the Wasm application, wasm_bindgen runs this…","create_webrequest","create web request from string","update a field in the struct","description","is_fullscreen","the name of the extern javascript function","GameMetadata","GamesMetadata","MsgInQueue","waiting ack msg","gamestatus","msgackkind"];
searchIndex["mem5"]={"doc":"mem5","i":[[5,"run","mem5",R[79],N,[[],[[R[19],[R[0]]],[R[0]]]]],[5,"__wasm_bindgen_generated_run",E,R[79],N,[[]]],[5,"session_storage",E,"Get the top-level window's session storage. TODO: to save…",N,[[],["storage"]]],[5,"ordinal_numbers",E,"format ordinal numbers as string 1st, 2nd,3rd,...",N,[[[R[2]]],[R[6]]]],[0,"ackmsgmod",E,"ackmsgmod.rs - ack msg",N,N],[5,"remove_ack_msg_from_queue","mem5::ackmsgmod","remove ack msg from queue - return true if there are no…",N,[[[R[1]],[R[2]]],["bool"]]],[5,"prepare_for_ack_msg_waiting",E,"prepare for ack msg waiting - return random msg_id",N,[[[R[1]],[R[4]]],[R[2]]]],[5,"send_msg_and_write_in_queue",E,"send msg and write in queue",N,[[[R[74]],[R[1]],[R[2]]]]],[5,"send_ack",E,"send ack",N,[[[R[1]],[R[2]],[R[91]]]]],[0,"divcardmonikermod","mem5","divcardmonikermod.rs - renders the card moniker (card…",N,N],[5,"div_grid_card_moniker","mem5::divcardmonikermod","the header can show only the game title or two card…",N,[[[R[1]],["bump"]],[["vec",["node"]],["node"]]]],[5,"calc_font_size",E,"when the lenght is bigger, the fontsize get smaller if the…",N,[[[R[2]]],["f64"]]],[17,"GAME_TITLE",E,"game title",N,N],[0,"divfordebuggingmod","mem5","divfordebuggingmod.rs - information for debugging",N,N],[5,"div_for_debugging","mem5::divfordebuggingmod","information for debugging",N,[[[R[1]],["bump"]],["node"]]],[0,"divfullscreenmod","mem5","divfullscreenmod.rs - instruction and button for fullscreen",N,N],[5,R[84],"mem5::divfullscreenmod","check the fullscreen_element. works only on android",N,[[[R[1]]],["bool"]]],[5,"div_fullscreen",E,"render the div for fullscreen",N,[[[R[1]],["bump"]],[["vec",["node"]],["node"]]]],[0,"divgridcontainermod","mem5","divgridcontainermod.rs - renders the grid container with…",N,N],[5,"div_grid_container","mem5::divgridcontainermod","prepare the grid container",N,[[[R[1]],["bump"],[R[3]]],["node"]]],[5,"div_grid_items",E,"prepare a vector for the Virtual Dom for 'css grid' item…",N,[[[R[1]],["bump"]],[["vec",["node"]],["node"]]]],[5,"div_grid_item",E,"on click is the most important part and here is more or…",N,[[[R[1]],["bump"],["str"]],["node"]]],[5,"play_sound",E,E,N,[[[R[1]],[R[2]]]]],[5,"grid_width",E,"grid width in pixels",N,[[],[R[2]]]],[5,"grid_height",E,"grid height in pixels",N,[[],[R[2]]]],[5,"max_grid_size",E,"calculate max with and height for a grid in pixels",N,[[[R[1]]],[R[3]]]],[17,"SRC_FOR_CARD_FACE_DOWN",E,"fixed filename for card face down",N,N],[0,"divplayeractionsmod","mem5","divplayeractionsmod.rs - renders the div to inform player…",N,N],[5,"div_player_actions_from_game_status","mem5::divplayeractionsmod","render html element to inform player what to do and get a…",N,[[[R[1]],["bump"]],["node"]]],[5,"div_unpredicted",E,"render unpredicted",N,[[[R[1]],["bump"]],["node"]]],[0,"divplayersandscoresmod","mem5","divplayersandscoresmod.rs - renders the div that shows…",N,N],[3,R[39],R[18],"Render Component: player score Its private fields are a…",N,N],[12,R[12],E,"whose turn is now:  player 1 or 2",0,N],[12,R[8],E,R[9],0,N],[12,"my_points",E,"my points",0,N],[12,R[10],E,R[11],0,N],[12,R[7],E,"my ws client instance unique id.",0,N],[11,"new",E,"constructor",0,[[[R[2]]],["self"]]],[11,"update_intern_cache",E,"copies the data from game data to internal cache internal…",0,[[["self"],["gamedata"]],["bool"]]],[0,"divrulesanddescriptionmod","mem5","divrulesanddescriptionmod.rs - renders the div that shows…",N,N],[3,R[44],R[22],"Render Component: The static parts can be cached easily.",N,N],[5,"text_with_br_newline",E,"change the newline lines ending into  node",N,[[["bump"],["str"]],[["vec",["node"]],["node"]]]],[17,"GAME_RULES",E,"Text of game rules. Multiline string literal just works.…",N,N],[17,"GAME_DESCRIPTION",E,"game description",N,N],[0,"fetchmod","mem5","fetchmod - isolate/encapsulate fetch api in a module…",N,N],[5,"fetch_response","mem5::fetchmod","The only public function that starts the code flow around…",N,[[[R[4]],[R[5]],["fn"]]]],[0,"fetchgamesmetadatamod","mem5","fetchgamesmetadatamod.rs - fetch the names of all games",N,N],[5,"fetch_games_metadata_request","mem5::fetchgamesmetadatamod","async fetch_response() for gamesmetadata.json",N,[[[R[6]],[R[4]]]]],[5,R[80],E,R[81],N,[[["str"]],[R[5]]]],[5,"set_game_metadata_from_json",E,R[82],N,[[[R[6]],[R[1]]]]],[0,"fetchgameconfigmod","mem5","fetchgameconfigmod.rs - fetch game_config",N,N],[5,"fetch_game_config_request","mem5::fetchgameconfigmod","async fetch_response() for gameconfig.json",N,[[[R[4]],[R[1]]]]],[5,R[80],E,R[81],N,[[["str"]],[R[5]]]],[5,"set_game_config_from_json",E,R[82],N,[[[R[6]],[R[1]]]]],[0,"fetchallimgsforcachemod","mem5","fetchallimgsforcachemod.rs - fetch all imgs for cache",N,N],[5,"fetch_all_img_for_cache_request","mem5::fetchallimgsforcachemod","fetch all imgs for the cache",N,[[[R[4]],[R[1]]]]],[5,R[80],E,R[81],N,[[["str"]],[R[5]]]],[5,"do_nothing",E,"do nothing",N,[[[R[6]],[R[1]]]]],[0,"gamedatamod","mem5","game data - structs and methods around game data",N,N],[3,"Size2d",R[29],"2d size (any UM -pixel, items, percent)",N,N],[12,"hor",E,"horizontal",1,N],[12,"ver",E,"vertical",1,N],[3,R[86],E,"game metadata (for the vector)",N,N],[12,"folder",E,"folder",2,N],[12,"name",E,"name",2,N],[12,R[83],E,R[83],2,N],[3,R[87],E,"games metadata vector",N,N],[12,"vec_game_metadata",E,"vec game_metadata",3,N],[3,R[40],E,"game config",N,N],[12,"card_moniker",E,"card moniker - the text/name of the card the zero element…",4,N],[12,"img_filename",E,"img filenames",4,N],[12,"sound_filename",E,"sound filenames",4,N],[12,"card_width",E,"card image width",4,N],[12,"card_height",E,"card image height",4,N],[12,"grid_items_hor",E,"number of cards horizontally",4,N],[12,"grid_items_ver",E,"number of card vertically",4,N],[3,"Card",E,"all the data for one card",N,N],[12,"status",E,"card status",5,N],[12,"card_number_and_img_src",E,"field for src attribute for HTML element imagea and…",5,N],[12,"card_index_and_id",E,"field for id attribute for HTML element image contains the…",5,N],[3,R[88],E,"save the message in queue to resend it if timeout expires",N,N],[12,"player_ws_uid",E,"the player that must ack the msg",6,N],[12,R[66],E,"the msg id is a random number",6,N],[12,"msg",E,"the content of the message if it needs to be resend",6,N],[3,R[41],E,"game data",N,N],[12,R[7],E,"my ws client instance unique id. To not listen the echo to…",7,N],[12,R[8],E,R[9],7,N],[12,R[10],E,R[11],7,N],[12,"ws",E,"web socket. used it to send message onclick.",7,N],[12,R[62],E,"players data as vector of player struct",7,N],[12,R[49],E,"the json string for the ws server to send msgs to other…",7,N],[12,R[65],E,"game status:…",7,N],[12,R[54],E,"vector of cards",7,N],[12,R[56],E,"card index of first click",7,N],[12,R[59],E,"card index of second click",7,N],[12,"content_folder_name",E,R[52],7,N],[12,R[51],E,"invite asks for a specific game",7,N],[12,R[12],E,"whose turn is now:  player 1,2,3,...",7,N],[12,"content_folders",E,"content folders vector",7,N],[12,"games_metadata",E,"games meta data",7,N],[12,R[55],E,"game_configs",7,N],[12,"error_text",E,"error text",7,N],[12,"href",E,"href",7,N],[12,"is_reconnect",E,"is reconnect",7,N],[12,R[84],E,"to not check it all the time",7,N],[12,"msgs_waiting_ack",E,"vector of msgs waiting for ack. If the 3 sec timeout…",7,N],[4,R[42],E,"the 3 possible statuss of one card",N,N],[13,"Down",E,"card face down",8,N],[13,"UpTemporary",E,"card face Up Temporary",8,N],[13,"UpPermanently",E,"card face up Permanently",8,N],[5,"prepare_players_ws_uid",E,"from the vector of players prepare a json string for the…",N,[[],[R[6]]]],[17,"_IMPL_SERIALIZE_FOR_Size2d",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Size2d",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GameMetadata",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GameMetadata",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GamesMetadata",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GamesMetadata",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GameConfig",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GameConfig",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_CardStatusCardFace",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_CardStatusCardFace",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_Card",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Card",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_MsgInQueue",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_MsgInQueue",E,E,N,N],[11,"prepare_random_data",E,"prepare new random data",7,[[["self"]]]],[11,"prepare_for_empty",E,"asociated function: before Accept, there are not random…",7,[[],[["vec",["card"]],["card"]]]],[11,"new",E,"constructor of game data",7,[[[R[2]],[R[13]]],["self"]]],[11,"is_status_for_grid_container",E,"the only status for rendering the grid container",7,[[["self"]],["bool"]]],[0,"javascriptimportmod","mem5","javascriptimport.rs - one single module to import…",N,N],[5,"javascriptdofullscreen","mem5::javascriptimportmod",R[85],N,[[]]],[5,"javascriptismobiledevice",E,R[85],N,[[],["bool"]]],[5,"do_fullscreen",E,"do full screen function - imported from javascript",N,[[]]],[5,"is_mobile_device",E,"is mobile device function - imported from javascript",N,[[],["bool"]]],[0,"localstoragemod","mem5","localstoragemod.rs - the player nickname is saved in the…",N,N],[5,"save_nickname_to_localstorage","mem5::localstoragemod","save nickname from html input elements to local storage…",N,[[[R[4]]]]],[5,"load_nickname",E,"load nickname from local storage",N,[[],[R[6]]]],[0,"logmod","mem5","logmod.rs - logging in wasm",N,N],[5,"debug_write","mem5::logmod","debug write into sessionstorage",N,[[["str"]]]],[5,"now_string",E,"string of now time",N,[[],[R[6]]]],[0,"rootrenderingcomponentmod","mem5","rootrenderingcomponentmod.rs - renders the web page",N,N],[3,R[43],R[35],"Root Render Component: the card grid struct has all the…",N,N],[12,"game_data",E,"game data will be inside of Root",9,N],[12,"cached_players_and_scores",E,"subComponent: players and scores. The data is a cached…",9,N],[12,"cached_rules_and_description",E,"subComponent: the static parts can be cached.",9,N],[5,"usize_window_inner_height",E,"return window inner height the size of the visible part of…",N,[[],[R[2]]]],[5,"usize_window_inner_width",E,"return window inner width the size of the visible part of…",N,[[],[R[2]]]],[5,"usize_window_inner_width_but_max_600",E,"return window inner width, but maximum 600px the size of…",N,[[],[R[2]]]],[11,"new",E,"Construct a new `RootRenderingComponent` component. Only…",9,[[[R[2]],[R[13]]],["self"]]],[11,"check_invalidate_for_all_components",E,"check invalidate render cache for all sub components",9,[[["self"]]]],[11,"reset",E,"reset the data to replay the game",9,[[["self"]]]],[11,"on_response_ws_uid",E,"msg response with uid, just to check. because the…",9,[[["self"],[R[2]]]]],[0,"sessionstoragemod","mem5","sessionstoragemod.rs - for debugging texts accessible…",N,N],[5,"add_to_begin_of_debug_text","mem5::sessionstoragemod","add to begin of debug text",N,[[["str"]]]],[5,"utf8_truncate",E,"utf8 truncate",N,[[[R[6]],[R[2]]]]],[5,"get_debug_text",E,"get debug text from session storage",N,[[],[R[6]]]],[5,"save_my_ws_uid",E,"save my_ws_uid to session storage",N,[[[R[2]]]]],[5,"load_my_ws_uid",E,"load my_ws_uid from session storage",N,[[],[R[2]]]],[0,"statusgamedatainitmod","mem5","statusgamedatainitmod.rs - code flow from this status",N,N],[5,"game_data_init","mem5::statusgamedatainitmod","prepares the game data",N,[[[R[1]]]]],[5,"on_msg_game_data_init",E,"on game data init",N,[[[R[4]],[R[1]],["str"]]]],[0,"statusinviteaskbeginmod","mem5",R[14],N,N],[5,"div_invite_ask_begin","mem5::statusinviteaskbeginmod","render invite ask begin, ask to play for multiple…",N,[[[R[1]],["bump"]],["node"]]],[5,"div_nickname_input",E,"render the nickname input",N,[[[R[1]],["bump"]],["node"]]],[5,"div_invite_ask_begin_on_click",E,"on click updates some data and sends msgs msgs will be…",N,[[[R[4]],[R[1]],["str"]]]],[5,"on_msg_invite",E,"msg invite",N,[[[R[2]],[R[6]],[R[1]]]]],[0,"statusinviteaskedmod","mem5","statusinviteaskedmod.rs - code flow from this status",N,N],[5,"div_invite_asked","mem5::statusinviteaskedmod","render asked",N,[[[R[1]],["bump"]],["node"]]],[5,"div_invite_asked_on_click",E,R[15],N,[[[R[1]]]]],[5,"on_msg_play_accept",E,"msg accept play",N,[[[R[6]],[R[1]],[R[2]]]]],[5,"div_play_accepted",E,"render play accepted",N,[[[R[1]],["bump"]],["node"]]],[0,"statusinviteaskingmod","mem5","statusinviteaskingmod.rs - code flow from this status",N,N],[5,"div_invite_asking","mem5::statusinviteaskingmod","render",N,[[[R[1]],["bump"]],["node"]]],[0,"statusplayagainmod","mem5","statusplayagainmod.rs - code flow from this status",N,N],[5,"div_play_again","mem5::statusplayagainmod","play again",N,[[[R[1]],["bump"]],["node"]]],[5,"on_msg_play_again",E,R[16],N,[[[R[1]]]]],[0,"statusplaybefore1stcardmod","mem5","statusplaybefore1stcardmod.rs - code flow from this status",N,N],[5,"div_click_1st_card","mem5::statusplaybefore1stcardmod",R[17],N,[[[R[1]],["bump"]],["node"]]],[5,"on_click_1st_card",E,R[15],N,[[[R[1]],[R[2]],[R[4]]]]],[5,"on_msg_player_click_1st_card",E,R[16],N,[[[R[1]],[R[2]]]]],[5,"update",E,"update the rrc data",N,[[[R[1]]]]],[5,"on_msg_ack_player_click1st_card",E,"on msg ack player click1st card",N,[[[R[1]],[R[2]]]]],[0,"statusplaybefore2ndcardmod","mem5","statusplaybefore2ndcardmod.rs - code flow from this status",N,N],[5,"div_click_2nd_card","mem5::statusplaybefore2ndcardmod",R[17],N,[[[R[1]],["bump"]],["node"]]],[5,"on_click_2nd_card",E,"on second click The on click event passed by JavaScript…",N,[[[R[1]],[R[2]],[R[4]]]]],[5,"on_msg_player_click_2nd_card_point",E,R[16],N,[[[R[1]],[R[2]]]]],[5,"update_click_2nd_card_point",E,R[16],N,[[[R[1]]]]],[5,"on_msg_ack_player_click2nd_card_point",E,"on msg ack player click2nd card",N,[[[R[1]],[R[2]]]]],[5,"on_msg_ack_player_click2nd_card_take_turn_begin",E,"on msg ack player click2nd card take turn begin",N,[[[R[1]],[R[2]]]]],[0,"statustaketurnbeginmod","mem5","statustaketurnbeginmod.rs - code flow from this status",N,N],[5,"div_take_turn_begin","mem5::statustaketurnbeginmod","render take turn",N,[[[R[1]],["bump"]],["node"]]],[5,"update",E,"fn on change for both click and we msg.",N,[[[R[1]]]]],[5,"on_msg_take_turn_begin",E,"on msg take turn begin",N,[[[R[1]],[R[2]]]]],[5,"update_take_turn_begin",E,"update take turn begin",N,[[[R[1]]]]],[5,"on_msg_take_turn_end",E,"msg player change",N,[[[R[1]],[R[2]]]]],[5,"on_msg_ack_take_turn_end",E,"all the players must acknowledge that they received the msg",N,[[[R[1]],[R[2]]]]],[0,"statuswaitingackmsgmod","mem5","statuswaitingackmsgmod.rs - code flow from this status",N,N],[5,"div_waiting_ack_msg","mem5::statuswaitingackmsgmod",R[89],N,[[[R[1]],["bump"]],["node"]]],[0,"websocketcommunicationmod","mem5","WebSocketcommunication.rs - module that cares about…",N,N],[5,"setup_ws_connection","mem5::websocketcommunicationmod","setup WebSocket connection",N,[[[R[6]],[R[2]]],[R[13]]]],[5,"setup_ws_msg_recv",E,"receive WebSocket msg callback.",N,[[[R[13]],[R[4]]]]],[5,"setup_ws_onerror",E,"on error write it on the screen for debugging",N,[[[R[13]],[R[4]]]]],[5,"setup_ws_onclose",E,"on close WebSocket connection",N,[[[R[13]],[R[4]]]]],[5,"setup_all_ws_events",E,"setup all ws events",N,[[[R[13]],[R[4]]]]],[5,"ws_send_msg",E,"generic send ws message",N,[[[R[13]],[R[74]]]]],[0,"websocketreconnectmod","mem5","websocketreconnectmod.rs - reconnection for websocket must…",N,N],[5,"div_reconnect","mem5::websocketreconnectmod","render reconnect",N,[[[R[1]],["bump"]],["node"]]],[5,"on_msg_request_ws_uid",E,"send all data to reconnected player",N,[[[R[1]],[R[2]]]]],[5,"on_msg_all_game_data",E,"after reconnect receive allthe data from other player",N,[[[R[2]],[R[90]],[R[6]],[R[1]]]]],[11,"from",R[18],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[20],E,E,0,[[[U]],[R[19]]]],[11,R[21],E,E,0,[[],[R[19]]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[34]]]],[11,R[24],E,E,0,[[],[R[19]]]],[11,R[25],E,E,0,[[],[R[19]]]],[11,R[26],E,E,0,[[["src"]],[R[19]]]],[11,R[27],E,E,0,[[["src"]],[R[19]]]],[11,R[20],E,E,0,[[["src"]],[R[19]]]],[11,R[21],E,E,0,[[],[R[19]]]],[11,"as_any",E,E,0,[[["self"]],["any"]]],[11,R[28],E,E,0,[[["self"]],["any"]]],[11,"from",R[22],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[20],E,E,10,[[[U]],[R[19]]]],[11,R[21],E,E,10,[[],[R[19]]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[30],E,E,10,[[["self"]],[R[34]]]],[11,R[24],E,E,10,[[],[R[19]]]],[11,R[25],E,E,10,[[],[R[19]]]],[11,R[26],E,E,10,[[["src"]],[R[19]]]],[11,R[27],E,E,10,[[["src"]],[R[19]]]],[11,R[20],E,E,10,[[["src"]],[R[19]]]],[11,R[21],E,E,10,[[],[R[19]]]],[11,"as_any",E,E,10,[[["self"]],["any"]]],[11,R[28],E,E,10,[[["self"]],["any"]]],[11,R[31],R[29],E,1,[[["self"]],[T]]],[11,R[32],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[20],E,E,1,[[[U]],[R[19]]]],[11,R[21],E,E,1,[[],[R[19]]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[R[34]]]],[11,R[24],E,E,1,[[],[R[19]]]],[11,R[25],E,E,1,[[],[R[19]]]],[11,R[26],E,E,1,[[["src"]],[R[19]]]],[11,R[27],E,E,1,[[["src"]],[R[19]]]],[11,R[20],E,E,1,[[["src"]],[R[19]]]],[11,R[21],E,E,1,[[],[R[19]]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[20],E,E,2,[[[U]],[R[19]]]],[11,R[21],E,E,2,[[],[R[19]]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"]],[R[34]]]],[11,R[24],E,E,2,[[],[R[19]]]],[11,R[25],E,E,2,[[],[R[19]]]],[11,R[26],E,E,2,[[["src"]],[R[19]]]],[11,R[27],E,E,2,[[["src"]],[R[19]]]],[11,R[20],E,E,2,[[["src"]],[R[19]]]],[11,R[21],E,E,2,[[],[R[19]]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[20],E,E,3,[[[U]],[R[19]]]],[11,R[21],E,E,3,[[],[R[19]]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[R[34]]]],[11,R[24],E,E,3,[[],[R[19]]]],[11,R[25],E,E,3,[[],[R[19]]]],[11,R[26],E,E,3,[[["src"]],[R[19]]]],[11,R[27],E,E,3,[[["src"]],[R[19]]]],[11,R[20],E,E,3,[[["src"]],[R[19]]]],[11,R[21],E,E,3,[[],[R[19]]]],[11,R[31],E,E,4,[[["self"]],[T]]],[11,R[32],E,E,4,[[["self"],[T]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[20],E,E,4,[[[U]],[R[19]]]],[11,R[21],E,E,4,[[],[R[19]]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"]],[R[34]]]],[11,R[24],E,E,4,[[],[R[19]]]],[11,R[25],E,E,4,[[],[R[19]]]],[11,R[26],E,E,4,[[["src"]],[R[19]]]],[11,R[27],E,E,4,[[["src"]],[R[19]]]],[11,R[20],E,E,4,[[["src"]],[R[19]]]],[11,R[21],E,E,4,[[],[R[19]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[20],E,E,5,[[[U]],[R[19]]]],[11,R[21],E,E,5,[[],[R[19]]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[30],E,E,5,[[["self"]],[R[34]]]],[11,R[24],E,E,5,[[],[R[19]]]],[11,R[25],E,E,5,[[],[R[19]]]],[11,R[26],E,E,5,[[["src"]],[R[19]]]],[11,R[27],E,E,5,[[["src"]],[R[19]]]],[11,R[20],E,E,5,[[["src"]],[R[19]]]],[11,R[21],E,E,5,[[],[R[19]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[20],E,E,6,[[[U]],[R[19]]]],[11,R[21],E,E,6,[[],[R[19]]]],[11,R[33],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"]],[R[34]]]],[11,R[24],E,E,6,[[],[R[19]]]],[11,R[25],E,E,6,[[],[R[19]]]],[11,R[26],E,E,6,[[["src"]],[R[19]]]],[11,R[27],E,E,6,[[["src"]],[R[19]]]],[11,R[20],E,E,6,[[["src"]],[R[19]]]],[11,R[21],E,E,6,[[],[R[19]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[20],E,E,7,[[[U]],[R[19]]]],[11,R[21],E,E,7,[[],[R[19]]]],[11,R[33],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[30],E,E,7,[[["self"]],[R[34]]]],[11,R[24],E,E,7,[[],[R[19]]]],[11,R[25],E,E,7,[[],[R[19]]]],[11,R[26],E,E,7,[[["src"]],[R[19]]]],[11,R[27],E,E,7,[[["src"]],[R[19]]]],[11,R[20],E,E,7,[[["src"]],[R[19]]]],[11,R[21],E,E,7,[[],[R[19]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[20],E,E,8,[[[U]],[R[19]]]],[11,R[21],E,E,8,[[],[R[19]]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"]],[R[34]]]],[11,R[24],E,E,8,[[],[R[19]]]],[11,R[25],E,E,8,[[],[R[19]]]],[11,R[26],E,E,8,[[["src"]],[R[19]]]],[11,R[27],E,E,8,[[["src"]],[R[19]]]],[11,R[20],E,E,8,[[["src"]],[R[19]]]],[11,R[21],E,E,8,[[],[R[19]]]],[11,"from",R[35],E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[20],E,E,9,[[[U]],[R[19]]]],[11,R[21],E,E,9,[[],[R[19]]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[30],E,E,9,[[["self"]],[R[34]]]],[11,R[24],E,E,9,[[],[R[19]]]],[11,R[25],E,E,9,[[],[R[19]]]],[11,R[26],E,E,9,[[["src"]],[R[19]]]],[11,R[27],E,E,9,[[["src"]],[R[19]]]],[11,R[20],E,E,9,[[["src"]],[R[19]]]],[11,R[21],E,E,9,[[],[R[19]]]],[11,"as_any",E,E,9,[[["self"]],["any"]]],[11,R[28],E,E,9,[[["self"]],["any"]]],[11,"as_ref",R[29],E,8,[[["self"]],["str"]]],[11,"clone",E,E,1,[[["self"]],[R[3]]]],[11,"clone",E,E,2,[[["self"]],["gamemetadata"]]],[11,"clone",E,E,3,[[["self"]],["gamesmetadata"]]],[11,"clone",E,E,4,[[["self"]],["gameconfig"]]],[11,R[36],E,E,1,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,2,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,3,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,4,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,8,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,5,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,6,[[["self"],["__s"]],[R[19]]]],[11,R[37],E,E,1,[[["__d"]],[R[19]]]],[11,R[37],E,E,2,[[["__d"]],[R[19]]]],[11,R[37],E,E,3,[[["__d"]],[R[19]]]],[11,R[37],E,E,4,[[["__d"]],[R[19]]]],[11,R[37],E,E,8,[[["__d"]],[R[19]]]],[11,R[37],E,E,5,[[["__d"]],[R[19]]]],[11,R[37],E,E,6,[[["__d"]],[R[19]]]],[11,"render",R[18],R[38],0,[[["bump"],["self"]],["node"]]],[11,"render",R[22],R[38],10,[[["bump"],["self"]],["node"]]],[11,"render",R[35],E,9,[[["bump"],["self"]],["node"]]]],"p":[[3,R[39]],[3,"Size2d"],[3,R[86]],[3,R[87]],[3,R[40]],[3,"Card"],[3,R[88]],[3,R[41]],[4,R[42]],[3,R[43]],[3,R[44]]]};
searchIndex["mem5_common"]={"doc":R[45],"i":[[3,"Player",R[45],"data for one player",N,N],[12,"ws_uid",E,"ws_uid",0,N],[12,R[46],E,R[46],0,N],[12,"points",E,"field for src attribute for HTML element image and…",0,N],[4,R[76],E,"`WsMessage` enum for WebSocket",N,N],[13,R[47],E,R[47],1,N],[12,"dummy",R[48],"anything",1,N],[13,"MsgRequestWsUid",R[45],"Request WebSocket Uid - first message to WebSocket server",1,N],[12,R[7],R[48],R[50],1,N],[12,R[49],E,R[53],1,N],[13,"MsgResponseWsUid",R[45],"response from WebSocket server for first message",1,N],[12,"your_ws_uid",R[48],"WebSocket Uid",1,N],[12,"server_version",E,"server version",1,N],[13,"MsgInvite",R[45],"invite",1,N],[12,R[7],R[48],R[50],1,N],[12,R[8],E,R[9],1,N],[12,R[51],E,R[52],1,N],[13,"MsgPlayAccept",R[45],"accept play",1,N],[12,R[7],R[48],R[50],1,N],[12,R[49],E,R[53],1,N],[12,R[8],E,R[9],1,N],[13,"MsgGameDataInit",R[45],"player1 initialize the game data and sends it to all…",1,N],[12,R[7],R[48],R[50],1,N],[12,R[49],E,R[53],1,N],[12,R[62],E,R[63],1,N],[12,R[54],E,R[64],1,N],[12,R[55],E,"json of game_config",1,N],[13,R[70],R[45],"player click",1,N],[12,R[7],R[48],R[57],1,N],[12,R[49],E,R[58],1,N],[12,R[56],E,R[60],1,N],[12,R[66],E,R[61],1,N],[13,R[71],R[45],"player click success",1,N],[12,R[7],R[48],R[57],1,N],[12,R[49],E,R[58],1,N],[12,R[59],E,R[60],1,N],[12,R[66],E,R[61],1,N],[13,R[72],R[45],R[68],1,N],[12,R[7],R[48],R[57],1,N],[12,R[49],E,R[58],1,N],[12,R[59],E,R[60],1,N],[12,R[66],E,R[61],1,N],[13,"MsgPlayerClick2ndCardGameOverPlayAgainBegin",R[45],"Play Again",1,N],[12,R[7],R[48],R[57],1,N],[12,R[49],E,R[58],1,N],[13,R[69],R[45],"player change",1,N],[12,R[7],R[48],R[50],1,N],[12,R[49],E,R[58],1,N],[12,R[66],E,R[61],1,N],[13,"MsgAllGameData",R[45],"all game data",1,N],[12,R[7],R[48],R[50],1,N],[12,R[49],E,"only the players that recconected",1,N],[12,R[62],E,R[63],1,N],[12,R[54],E,R[64],1,N],[12,R[56],E,R[60],1,N],[12,R[59],E,R[60],1,N],[12,R[12],E,"player turn",1,N],[12,R[65],E,"game status",1,N],[13,"MsgAck",R[45],"acknowledge msg, that the receiver received the message",1,N],[12,R[7],R[48],"msg sender uid",1,N],[12,R[49],E,"send msg to this players",1,N],[12,R[66],E,R[61],1,N],[12,"msg_ack_kind",E,"kind of ack msg",1,N],[4,R[77],R[45],"the game can be in various statuses and that differentiate…",N,N],[13,"StatusInviteAskBegin",E,"invite ask begin",2,N],[13,"StatusInviteAsking",E,"Player1 MsgInvite Asking",2,N],[13,"StatusInviteAsked",E,"Player2 MsgInvite Asked",2,N],[13,R[67],E,R[67],2,N],[13,"StatusPlayBefore1stCard",E,"Play before first card",2,N],[13,"StatusPlayBefore2ndCard",E,"Play before second card",2,N],[13,"StatusTakeTurnBegin",E,R[68],2,N],[13,"StatusTakeTurnEnd",E,"take turn end",2,N],[13,"StatusGameOverPlayAgainBegin",E,"end game",2,N],[13,"StatusReconnect",E,"StatusReconnect after a lost connection",2,N],[13,"StatusWaitingAckMsg",E,R[89],2,N],[4,R[78],E,"msg ack kind",N,N],[13,R[69],E,"ack for MsgTakeTurnEnd",3,N],[13,R[70],E,"ack for MsgPlayerClick1stCard",3,N],[13,R[71],E,"ack for MsgPlayerClick2ndCardPoint",3,N],[13,R[72],E,E,3,N],[17,"_IMPL_SERIALIZE_FOR_WsMessage",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_WsMessage",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GameStatus",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GameStatus",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_Player",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Player",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_MsgAckKind",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_MsgAckKind",E,E,N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[20],E,E,0,[[[U]],[R[19]]]],[11,R[21],E,E,0,[[],[R[19]]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[34]]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[20],E,E,1,[[[U]],[R[19]]]],[11,R[21],E,E,1,[[],[R[19]]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[R[34]]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[73],E,E,2,[[["self"]],[R[6]]]],[11,R[20],E,E,2,[[[U]],[R[19]]]],[11,R[21],E,E,2,[[],[R[19]]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"]],[R[34]]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[73],E,E,3,[[["self"]],[R[6]]]],[11,R[20],E,E,3,[[[U]],[R[19]]]],[11,R[21],E,E,3,[[],[R[19]]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[R[34]]]],[11,"as_ref",E,E,2,[[["self"]],["str"]]],[11,"as_ref",E,E,3,[[["self"]],["str"]]],[11,"clone",E,E,1,[[["self"]],[R[74]]]],[11,"clone",E,E,2,[[["self"]],[R[90]]]],[11,"clone",E,E,3,[[["self"]],[R[91]]]],[11,"fmt",E,E,2,[[["self"],[R[75]]],[["error"],[R[19],["error"]]]]],[11,"fmt",E,E,3,[[["self"],[R[75]]],[["error"],[R[19],["error"]]]]],[11,R[36],E,E,1,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,2,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,0,[[["self"],["__s"]],[R[19]]]],[11,R[36],E,E,3,[[["self"],["__s"]],[R[19]]]],[11,R[37],E,E,1,[[["__d"]],[R[19]]]],[11,R[37],E,E,2,[[["__d"]],[R[19]]]],[11,R[37],E,E,0,[[["__d"]],[R[19]]]],[11,R[37],E,E,3,[[["__d"]],[R[19]]]]],"p":[[3,"Player"],[4,R[76]],[4,R[77]],[4,R[78]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);